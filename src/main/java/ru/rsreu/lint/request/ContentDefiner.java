package ru.rsreu.lint.request;

import ru.rsreu.lint.enums.ResponseType;
import ru.rsreu.lint.response.BotResponse;

public class ContentDefiner {

    public BotResponse getResponse(String command) {
        if (command.startsWith("lang_")) {
            return new BotResponse(ResponseType.SELECTED_LANGUAGE, "–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: " + formatLang(command));
        } else if (command.startsWith("toggle_")) {
            return new BotResponse(ResponseType.TOGGLE_OPTION, "–ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä: " + formatOption(command));
        } else if (command.startsWith("sql_dialect_")) {
            return new BotResponse(ResponseType.SELECTED_SQL_DIALECT, "–í—ã–±—Ä–∞–Ω –¥–∏–∞–ª–µ–∫—Ç SQL: " + formatSqlDialect(command));
        } else if (command.startsWith("sql_toggle_")) {
            return new BotResponse(ResponseType.SQL_TOGGLE_OPTION, "–ü–µ—Ä–µ–∫–ª—é—á—ë–Ω SQL-–ø–∞—Ä–∞–º–µ—Ç—Ä: " + formatSqlOption(command));
        } else if ("continue_to_code_input".equals(command)) {
            return new BotResponse(ResponseType.CONTINUE, "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞");
        } else if ("back_to_menu".equals(command)) {
            return new BotResponse(ResponseType.BACK_TO_MENU, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        } else if ("done_language_options".equals(command)) {
            return new BotResponse(ResponseType.DONE, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã–±–æ—Ä.");
        }

        return switch (command) {
            case "/start" -> new BotResponse(ResponseType.START_MENU, "–ú–µ–Ω—é:");
            case "language_translation" -> new BotResponse(ResponseType.LANGUAGE_TRANSLATION, "–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –Ø–ü");
            case "sql_dialects" -> new BotResponse(ResponseType.SQL_DIALECTS, "–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É –¥–∏–∞–ª–µ–∫—Ç–∞–º–∏ SQL");
            case "about_bot" -> new BotResponse(ResponseType.ABOUT_BOT, """
                    –≠—Ç–æ Telegram-–±–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ SQL-–¥–∏–∞–ª–µ–∫—Ç–∞–º–∏.
                    
                    üîÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
                    ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: Java, Python, JavaScript, C++, C#, Go, Ruby, Swift, Kotlin, Rust
                    ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É SQL-–¥–∏–∞–ª–µ–∫—Ç–∞–º–∏: PostgreSQL, MySQL, MSSQL, SQLite, Oracle, MariaDB, SQL Server, DB2, Sybase, Informix
                    
                    ‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
                    ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                    ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.""");
            default -> new BotResponse(ResponseType.UNKNOWN, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
        };
    }

    private String formatLang(String langCode) {
        return langCode.substring(5).toUpperCase();
    }

    private String formatOption(String optionCode) {
        return switch (optionCode) {
            case "toggle_optimize" -> "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è";
            case "toggle_standards" -> "–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã";
            case "toggle_documentation" -> "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è";
            case "toggle_tests" -> "–¢–µ—Å—Ç—ã";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä";
        };
    }

    private String formatSqlDialect(String dialectCode) {
        return dialectCode.substring(12).toUpperCase().replace("_", " ");
    }

    private String formatSqlOption(String optionCode) {
        return switch (optionCode) {
            case "sql_toggle_comments" -> "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏";
            case "sql_toggle_formatting" -> "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ";
            case "sql_toggle_case" -> "–†–µ–≥–∏—Å—Ç—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä";
        };
    }
}